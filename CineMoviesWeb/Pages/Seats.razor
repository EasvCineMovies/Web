@page "/seats/{scheduleId:int}"
@using DevOpsCineMovies.Entities
@using CineMoviesWeb.Models
@using System.Security.Cryptography

@inject IJSRuntime JsRuntime

<h3>Seats</h3>

@if (_seats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    Seat No
                </th>
                <th>
                    Seat Row
                </th>
                <th>
                    Seat Column
                </th>
                <th>
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var seat in _seats)
            {
                <tr>
                    <td>
                        @seat.Id
                    </td>
                    <td>
                        @seat.Row
                    </td>
                    <td>
                        @seat.Column
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="async () => {
                        await CreateReservation(seat.Id);}">Reserve</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int ScheduleId { get; set; }

    private List<Seat>? _seats { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _seats = await ApiRequestAdapter.ReadAllSeats(1);
    }

    async Task CreateReservation(int seatId)
    {
        if (UserHandler.GetUser() is null)
        {
            string? phoneNo = await JsRuntime.InvokeAsync<string?>("prompt", "Enter your phone number here: "); // Prompt
            
            if (phoneNo is null)
            {
                return;
            }
            try
            {
                await ApiRequestAdapter.ReadUser(phoneNo);
                await JsRuntime.InvokeVoidAsync("alert", "User already exists");
                return;
            }
            catch (Exception exception)
            {
                if (exception.Message.Contains("User not found"))
                {
                    await ApiRequestAdapter.CreateUser(
                        phone: phoneNo,
                        name: "anon",
                        email: "anon",
                        password: PasswordHelper.HashPassword(RandomNumberGenerator.GetInt32(0, int.MaxValue).ToString())
                        );
                    UserHandler.SetUser(await ApiRequestAdapter.ReadUser(phoneNo));
                }
            }
            
            
            List<Schedule> schedules = await ApiRequestAdapter.ReadSchedule(1);
            Schedule schedule = schedules.FirstOrDefault(s => s.Id == ScheduleId) ?? throw new Exception("Schedule not found");
            Movie movie = await ApiRequestAdapter.ReadMovie(schedule.MovieId);
            await ApiRequestAdapter.CreateReservation(
                userPhone: UserHandler.GetUser()!.Phone,
                seatId: seatId,
                movieId: movie.Id,
                cinemaId: 1,
                scheduleId: ScheduleId,
                price: 250,
                reservationDate: DateTime.Now
                );
        }
    }

}